package mathLib.func;

public class Arithmetic {
	private static final double[] stirlingCorrection = new double[]{0.0D, 0.08106146679532726D, 0.04134069595540929D,
			0.02767792568499834D, 0.02079067210376509D, 0.01664469118982119D, 0.01387612882307075D,
			0.01189670994589177D, 0.01041126526197209D, 0.009255462182712733D, 0.00833056343336287D,
			0.007573675487951841D, 0.00694284010720953D, 0.006408994188004207D, 0.005951370112758848D,
			0.005554733551962801D, 0.00520765591960964D, 0.004901395948434738D, 0.004629153749334029D,
			0.004385560249232324D, 0.004166319691996922D, 0.00396795421864086D, 0.00378761806844443D,
			0.00362296022468309D, 0.00347202138297877D, 0.00333315563672809D, 0.00320497022805504D,
			0.00308627868260878D, 0.00297606398355041D, 0.00287344936235247D, 0.00277767492975269D};
	protected static final double[] logFactorials = new double[]{0.0D, 0.0D, 0.6931471805599453D, 1.791759469228055D,
			3.1780538303479458D, 4.787491742782046D, 6.579251212010101D, 8.525161361065415D, 10.60460290274525D,
			12.801827480081469D, 15.104412573075516D, 17.502307845873887D, 19.987214495661885D, 22.552163853123425D,
			25.19122118273868D, 27.89927138384089D, 30.671860106080672D, 33.50507345013689D, 36.39544520803305D,
			39.339884187199495D, 42.335616460753485D, 45.38013889847691D, 48.47118135183523D, 51.60667556776438D,
			54.78472939811232D, 58.00360522298052D, 61.261701761002D, 64.55753862700634D, 67.88974313718154D,
			71.25703896716801D};
	protected static final long[] longFactorials = new long[]{1L, 1L, 2L, 6L, 24L, 120L, 720L, 5040L, 40320L, 362880L,
			3628800L, 39916800L, 479001600L, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L,
			355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L};
	protected static final double[] doubleFactorials = new double[]{5.109094217170944E19D, 1.1240007277776077E21D,
			2.585201673888498E22D, 6.204484017332394E23D, 1.5511210043330984E25D, 4.032914611266057E26D,
			1.0888869450418352E28D, 3.048883446117138E29D, 8.841761993739701E30D, 2.652528598121911E32D,
			8.222838654177924E33D, 2.6313083693369355E35D, 8.68331761881189E36D, 2.952327990396041E38D,
			1.0333147966386144E40D, 3.719933267899013E41D, 1.3763753091226346E43D, 5.23022617466601E44D,
			2.0397882081197447E46D, 8.15915283247898E47D, 3.34525266131638E49D, 1.4050061177528801E51D,
			6.041526306337384E52D, 2.6582715747884495E54D, 1.196222208654802E56D, 5.502622159812089E57D,
			2.5862324151116827E59D, 1.2413915592536068E61D, 6.082818640342679E62D, 3.0414093201713376E64D,
			1.5511187532873816E66D, 8.06581751709439E67D, 4.274883284060024E69D, 2.308436973392413E71D,
			1.2696403353658264E73D, 7.109985878048632E74D, 4.052691950487723E76D, 2.350561331282879E78D,
			1.386831185456898E80D, 8.32098711274139E81D, 5.075802138772246E83D, 3.146997326038794E85D,
			1.9826083154044396E87D, 1.2688693218588414E89D, 8.247650592082472E90D, 5.443449390774432E92D,
			3.6471110918188705E94D, 2.48003554243683E96D, 1.7112245242814127E98D, 1.1978571669969892E100D,
			8.504785885678624E101D, 6.123445837688612E103D, 4.470115461512686E105D, 3.307885441519387E107D,
			2.4809140811395404E109D, 1.8854947016660506E111D, 1.451830920282859E113D, 1.1324281178206295E115D,
			8.94618213078298E116D, 7.15694570462638E118D, 5.797126020747369E120D, 4.7536433370128435E122D,
			3.94552396972066E124D, 3.314240134565354E126D, 2.8171041143805494E128D, 2.4227095383672744E130D,
			2.107757298379527E132D, 1.854826422573984E134D, 1.6507955160908465E136D, 1.4857159644817605E138D,
			1.3520015276784033E140D, 1.2438414054641305E142D, 1.156772507081641E144D, 1.0873661566567426E146D,
			1.0329978488239061E148D, 9.916779348709491E149D, 9.619275968248216E151D, 9.426890448883248E153D,
			9.332621544394415E155D, 9.332621544394418E157D, 9.42594775983836E159D, 9.614466715035125E161D,
			9.902900716486178E163D, 1.0299016745145631E166D, 1.0813967582402912E168D, 1.1462805637347086E170D,
			1.2265202031961373E172D, 1.324641819451829E174D, 1.4438595832024942E176D, 1.5882455415227423E178D,
			1.7629525510902457E180D, 1.974506857221075E182D, 2.2311927486598138E184D, 2.543559733472186E186D,
			2.925093693493014E188D, 3.393108684451899E190D, 3.96993716080872E192D, 4.6845258497542896E194D,
			5.574585761207606E196D, 6.689502913449135E198D, 8.094298525273444E200D, 9.875044200833601E202D,
			1.2146304367025332E205D, 1.506141741511141E207D, 1.882677176888926E209D, 2.3721732428800483E211D,
			3.0126600184576624E213D, 3.856204823625808E215D, 4.974504222477287E217D, 6.466855489220473E219D,
			8.471580690878813E221D, 1.1182486511960037E224D, 1.4872707060906847E226D, 1.99294274616152E228D,
			2.690472707318049E230D, 3.6590428819525483E232D, 5.0128887482749884E234D, 6.917786472619482E236D,
			9.615723196941089E238D, 1.3462012475717523E241D, 1.8981437590761713E243D, 2.6953641378881633E245D,
			3.8543707171800694E247D, 5.550293832739308E249D, 8.047926057471989E251D, 1.1749972043909107E254D,
			1.72724589045464E256D, 2.5563239178728637E258D, 3.8089226376305687E260D, 5.7133839564458575E262D,
			8.627209774233244E264D, 1.3113358856834527E267D, 2.0063439050956838E269D, 3.0897696138473515E271D,
			4.789142901463393E273D, 7.471062926282892E275D, 1.1729568794264134E278D, 1.8532718694937346E280D,
			2.946702272495036E282D, 4.714723635992061E284D, 7.590705053947223E286D, 1.2296942187394494E289D,
			2.0044015765453032E291D, 3.287218585534299E293D, 5.423910666131583E295D, 9.003691705778434E297D,
			1.5036165148649983E300D, 2.5260757449731988E302D, 4.2690680090047056E304D, 7.257415615308004E306D};

	public static double binomial(double var0, long var2) {
		if (var2 < 0L) {
			return 0.0D;
		} else if (var2 == 0L) {
			return 1.0D;
		} else if (var2 == 1L) {
			return var0;
		} else {
			double var4 = var0 - (double) var2 + 1.0D;
			double var6 = 1.0D;
			double var8 = 1.0D;

			for (long var10 = var2; var10-- > 0L; var8 *= var4++ / var6++) {
				;
			}

			return var8;
		}
	}

	public static double binomial(long var0, long var2) {
		if (var2 < 0L) {
			return 0.0D;
		} else if (var2 != 0L && var2 != var0) {
			if (var2 != 1L && var2 != var0 - 1L) {
				if (var0 > var2) {
					int var4 = longFactorials.length + doubleFactorials.length;
					if (var0 < (long) var4) {
						double var5 = factorial((int) var0);
						double var7 = factorial((int) var2);
						double var9 = factorial((int) (var0 - var2));
						double var11 = var9 * var7;
						if (var11 != Double.POSITIVE_INFINITY) {
							return var5 / var11;
						}
					}

					if (var2 > var0 / 2L) {
						var2 = var0 - var2;
					}
				}

				long var13 = var0 - var2 + 1L;
				long var6 = 1L;
				double var8 = 1.0D;

				for (long var10 = var2; var10-- > 0L; var8 *= (double) (var13++) / (double) (var6++)) {
					;
				}

				return var8;
			} else {
				return (double) var0;
			}
		} else {
			return 1.0D;
		}
	}

	public static long ceil(double var0) {
		return Math.round(Math.ceil(var0));
	}

	public static double chbevl(double var0, double[] var2, int var3) throws ArithmeticException {
		byte var10 = 0;
		int var12 = var10 + 1;
		double var4 = var2[var10];
		double var6 = 0.0D;
		int var11 = var3 - 1;

		double var8;
		do {
			var8 = var6;
			var6 = var4;
			var4 = var0 * var4 - var8 + var2[var12++];
			--var11;
		} while (var11 > 0);

		return 0.5D * (var4 - var8);
	}

	public static double factorial(int var0) {
		if (var0 < 0) {
			throw new IllegalArgumentException();
		} else {
			int var1 = longFactorials.length;
			if (var0 < var1) {
				return (double) longFactorials[var0];
			} else {
				int var2 = doubleFactorials.length;
				return var0 < var1 + var2 ? doubleFactorials[var0 - var1] : Double.POSITIVE_INFINITY;
			}
		}
	}

	public static long floor(double var0) {
		return Math.round(Math.floor(var0));
	}

	public static double log(double var0, double var2) {
		return Math.log(var2) / Math.log(var0);
	}

	public static double log10(double var0) {
		return Math.log(var0) * 0.43429448190325176D;
	}

	public static double log2(double var0) {
		return Math.log(var0) * 1.4426950408889634D;
	}

	public static double logFactorial(int var0) {
		if (var0 >= 30) {
			double var1 = 1.0D / (double) var0;
			double var3 = var1 * var1;
			return ((double) var0 + 0.5D) * Math.log((double) var0) - (double) var0 + 0.9189385332046728D
					+ var1 * (0.08333333333333333D + var3 * (-0.002777777777777778D
							+ var3 * (7.936507936507937E-4D + var3 * -5.952380952380953E-4D)));
		} else {
			return logFactorials[var0];
		}
	}

	public static long longFactorial(int var0) throws IllegalArgumentException {
		if (var0 < 0) {
			throw new IllegalArgumentException("Negative k");
		} else if (var0 < longFactorials.length) {
			return longFactorials[var0];
		} else {
			throw new IllegalArgumentException("Overflow");
		}
	}

	public static double stirlingCorrection(int var0) {
		if (var0 > 30) {
			double var9 = 1.0D / (double) var0;
			double var11 = var9 * var9;
			return var9 * (0.08333333333333333D + var11
					* (-0.002777777777777778D + var11 * (7.936507936507937E-4D + var11 * -5.952380952380953E-4D)));
		} else {
			return stirlingCorrection[var0];
		}
	}

}
