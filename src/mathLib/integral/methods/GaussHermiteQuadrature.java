package mathLib.integral.methods;

import flanagan.integration.IntegralFunction;
import mathLib.integral.Integral1D;
import mathLib.integral.intf.IntegralFunction1D;
import mathLib.sequence.Sequence;
import mathLib.sequence.Series;


public class GaussHermiteQuadrature {

	// 50 points

	// for calculating integral -inf to inf

	double[] points = { -9.182406958129317366347, -8.52277103091780418914, -7.97562236820563655424,
			-7.486409429864194266821, -7.034323509770610648808, -6.60864797385535900613, -6.20295251927467161631,
			-5.812994675420406059157, -5.435786087224948141616, -5.069117584917235032452, -4.71129366616904278739,
			-4.360973160454578664322, -4.017068172858134387881, -3.678677062515269281719, -3.345038313937891090222,
			-3.01549776957452241886, -2.689484702267745072548, -2.366493904298663828905, -2.046071968686409207851,
			-1.72780654751589855853, -1.411317754898300062015, -1.096251128957681642351, -0.7822717295546068858116,
			-0.4690590566782360862441, -0.1563025468894686754381, 0.1563025468894686754381, 0.4690590566782360862441,
			0.7822717295546068858116, 1.096251128957681642351, 1.411317754898300062015, 1.72780654751589855853,
			2.046071968686409207851, 2.366493904298663828905, 2.689484702267745072548, 3.01549776957452241886,
			3.345038313937891090222, 3.678677062515269281719, 4.017068172858134387881, 4.360973160454578664322,
			4.711293666169042787394, 5.069117584917235032452, 5.435786087224948141616, 5.812994675420406059157,
			6.202952519274671616315, 6.608647973855359006128, 7.034323509770610648808, 7.486409429864194266821,
			7.97562236820563655424, 8.522771030917804189138, 9.182406958129317366347 };

	double[] weights = { 1.83379404857343137642E-37, 1.67380166790779471339E-32, 1.2152441234045006413E-28,
			2.13765830836008338473E-25, 1.41709359957340162377E-22, 4.4709843654078907281E-20,
			7.74238295704340611947E-18, 8.0942618934651598593E-16, 5.465944031815589456E-14, 2.5066555238996757394E-12,
			8.1118773649302161536E-11, 1.90904054381189844931E-9, 3.34679340402142957116E-8, 4.4570299668178332986E-7,
			4.58168270795552597175E-6, 3.68401905378072416863E-5, 2.34269892109255765934E-4, 0.00118901178174964499704,
			0.00485326382617194711101, 0.01603194106841218513434, 0.04307915915676554546147, 0.0945489354770862338689,
			0.1700324556771640148208, 0.251130856332002444465, 0.3050851292043988076206, 0.3050851292043988076206,
			0.251130856332002444465, 0.1700324556771640148208, 0.0945489354770862338689, 0.0430791591567655454615,
			0.01603194106841218513434, 0.004853263826171947111009, 0.00118901178174964499704, 2.34269892109255765934E-4,
			3.68401905378072416863E-5, 4.5816827079555259718E-6, 4.4570299668178332986E-7, 3.34679340402142957116E-8,
			1.90904054381189844931E-9, 8.1118773649302161536E-11, 2.50665552389967573943E-12, 5.465944031815589456E-14,
			8.0942618934651598593E-16, 7.7423829570434061195E-18, 4.4709843654078907281E-20, 1.41709359957340162377E-22,
			2.13765830836008338473E-25, 1.2152441234045006413E-28, 1.6738016679077947134E-32,
			1.83379404857343137642E-37 };

	IntegralFunction func;
	double start, end;

	public GaussHermiteQuadrature(IntegralFunction func) {
		this.func = func;
	}

	public double getIntegral() {
		Sequence sFunc = k -> weights[(int) k] * func.function(getTransform(points[(int) k])) *
								Math.exp(getTransform(points[(int) k])*getTransform(points[(int) k]));
		Series integral = new Series(sFunc);
		return integral.sum(0, points.length - 1);
	}

	private double getTransform(double u) {
		return u;
	}

	// for test
	public static void main(String[] args) {
		IntegralFunction1D func1d = x -> Math.sin(x) / x;
		Integral1D integral1d = new Integral1D(func1d, Double.MIN_VALUE, Double.MAX_VALUE);
		System.out.println(integral1d.getIntegral());

		GaussHermiteQuadrature glQuad = new GaussHermiteQuadrature(func1d);
		System.out.println(glQuad.getIntegral());
	}

}
